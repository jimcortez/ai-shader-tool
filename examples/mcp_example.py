#!/usr/bin/env python3
"""Example script demonstrating MCP server usage."""

import asyncio
import json
from pathlib import Path

# Example ISF shader
EXAMPLE_SHADER = """/*{
    "DESCRIPTION": "Example ISF Shader",
    "CREDIT": "Generated by ISF Shader Renderer",
    "CATEGORIES": ["Example"],
    "INPUTS": [],
    "PASSES": []
}*/

void main() {
    vec2 uv = gl_FragCoord.xy / RENDERSIZE.xy;
    
    // Create a simple animated gradient
    float time = TIME;
    vec3 color = vec3(
        sin(uv.x * 10.0 + time * 2.0) * 0.5 + 0.5,
        cos(uv.y * 8.0 + time * 1.5) * 0.5 + 0.5,
        sin((uv.x + uv.y) * 5.0 + time * 3.0) * 0.5 + 0.5
    );
    
    gl_FragColor = vec4(color, 1.0);
}"""


async def test_mcp_server():
    """Test the MCP server functionality."""
    from isf_shader_renderer.mcp.handlers import ISFShaderHandlers
    
    print("Testing ISF Shader Renderer MCP Server")
    print("=" * 50)
    
    # Create handlers
    handlers = ISFShaderHandlers()
    
    # Test 1: Validate shader
    print("\n1. Testing shader validation...")
    result = await handlers.call_tool("validate_shader", {
        "shader_content": EXAMPLE_SHADER
    })
    
    print(f"Success: {result['success']}")
    print(f"Message: {result['message']}")
    if result.get('errors'):
        print(f"Errors: {result['errors']}")
    if result.get('warnings'):
        print(f"Warnings: {result['warnings']}")
    
    # Test 2: Get shader info
    print("\n2. Testing shader info extraction...")
    result = await handlers.call_tool("get_shader_info", {
        "shader_content": EXAMPLE_SHADER
    })
    
    print(f"Success: {result['success']}")
    print(f"Message: {result['message']}")
    if result.get('shader_info'):
        info = result['shader_info']
        print(f"Shader Info:")
        print(f"  Type: {info.get('type')}")
        print(f"  Size: {info.get('size')} characters")
        print(f"  Lines: {info.get('lines')}")
        print(f"  Has TIME uniform: {info.get('has_time_uniform')}")
        print(f"  Has RENDERSIZE uniform: {info.get('has_resolution_uniform')}")
        if 'description' in info:
            print(f"  Description: {info['description']}")
    
    # Test 3: Render shader
    print("\n3. Testing shader rendering...")
    result = await handlers.call_tool("render_shader", {
        "shader_content": EXAMPLE_SHADER,
        "time_codes": [0.0, 1.0, 2.0],
        "width": 320,
        "height": 240,
        "quality": 95,
        "verbose": True
    })
    
    print(f"Success: {result['success']}")
    print(f"Message: {result['message']}")
    print(f"Rendered frames: {len(result['rendered_frames'])}")
    print(f"Metadata: {result['metadata']}")
    # Print a short base64 preview for each frame
    for idx, frame_b64 in enumerate(result['rendered_frames']):
        print(f"  Frame {idx}: base64 (first 60 chars): {frame_b64[:60]}...")
    print("(Frames are base64-encoded JPEG images)")
    # Save one frame as example
    if result['rendered_frames']:
        import base64
        from PIL import Image
        import io
        # Decode first frame
        image_data = base64.b64decode(result['rendered_frames'][0])
        image = Image.open(io.BytesIO(image_data))
        # Save to file
        output_path = Path("examples/rendered_frame.png")
        output_path.parent.mkdir(exist_ok=True)
        image.save(output_path)
        print(f"Saved example frame to: {output_path}")
    
    # Test 4: List resources
    print("\n4. Testing resource listing...")
    resources = await handlers.list_resources()
    print(f"Available resources: {len(resources)}")
    for resource in resources:
        print(f"  - {resource.name}: {resource.description}")
    
    # Test 5: Read resource
    print("\n5. Testing resource reading...")
    if resources:
        content = await handlers.read_resource(resources[0].uri)
        print(f"Resource content length: {len(content)} bytes")
        print(f"First 100 characters: {content[:100].decode()}")
    
    print("\nMCP server test completed!")


def main():
    """Main function."""
    print("ISF Shader Renderer MCP Server Example")
    print("This example demonstrates the MCP server functionality.")
    print()
    
    try:
        asyncio.run(test_mcp_server())
    except Exception as e:
        print(f"Error: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main()) 